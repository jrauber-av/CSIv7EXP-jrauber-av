name: Build on macOS

on:
  push:
    branches: ['mac-sign-test']
  pull_request:
    branches: ['mac-sign-test']

jobs:
  build-macos-arm:
    runs-on: macos-latest

    env:
      PLUGIN_NAME: reaper_csurf_integrator
      BUNDLE_ID: com.example.reaper_csurf_integrator
      APLDEV_CODESIGN_IDENTITY: ${{ secrets.APLDEV_CODESIGN_IDENTITY }}
      APLDEV_NOTARY_USERNAME: ${{ secrets.APLDEV_NOTARY_USERNAME }}
      APLDEV_NOTARY_PASSWORD: ${{ secrets.APLDEV_NOTARY_PASSWORD }}
      APLDEV_TEAM_ID: ${{ secrets.APLDEV_TEAM_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import Developer ID certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APLDEV_CERT_CONTENT_BASE64 }}
          p12-password: ${{ secrets.APLDEV_CERT_PASSWORD }}

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v2

      - name: Configure CMake
        run: >
          cmake -B ${{ github.workspace }}/build
          -DCMAKE_CXX_STANDARD=17
          -DCMAKE_BUILD_TYPE=Release
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ github.workspace }}/build --config Release

      - name: Debug Build Output
        run: find build -name '*.dylib'

      - name: Code Sign Built dylibs
        run: |
          find build -name "*.dylib" -print0 | xargs -0 -I{} codesign --force --deep --options runtime --sign "$APLDEV_CODESIGN_IDENTITY" {}

      - name: Prepare Package folder
        run: |
          mkdir -p Package/UserPlugins
          cp ./build/$PLUGIN_NAME.dylib Package/UserPlugins/
          cp -r Scripts Package/
          cp -r CSI Package/
        shell: bash

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: $PLUGIN_NAME_mac_intel
          path: Package

      - name: Create ZIP for Notarization
        run: |
          zip ${{ github.workspace }}/to_notarization.zip ./Package/UserPlugins/$PLUGIN_NAME.dylib
        shell: bash

      - name: Notarize ZIP file
        id: notarize
        run: >
          notarize_response=$(xcrun altool --notarize-app
            --primary-bundle-id "$BUNDLE_ID"
            --username $APLDEV_NOTARY_USERNAME
            --password $APLDEV_NOTARY_PASSWORD
            --file ${{ github.workspace }}/to_notarization.zip)
          
          echo "$notarize_response"
          notarizationRequestUUID=$(echo "$notarize_response" | grep -o 'RequestUUID = [^ ]*' | awk '{print $2}')
          echo "Notarization Request UUID: $notarizationRequestUUID"
          echo "::set-output name=request_uuid::$notarizationRequestUUID"

      - name: Wait for Notarization Results
        run: |
          while true; do
            result=$(xcrun altool --notarization-info ${{ steps.notarize.outputs.request_uuid }} \
              --username $APLDEV_NOTARY_USERNAME \
              --password $APLDEV_NOTARY_PASSWORD)
            if [[ $result == *"Status: success"* ]]; then
              echo "Notarization success!"
              break
            elif [[ $result == *"Status: invalid"* ]]; then
              echo "Notarization failed!"
              exit 1
            else
              echo "Notarization pending, checking again in 30 seconds..."
              sleep 30
            fi
          done
        shell: bash

      - name: Staple Notarization Ticket
        run: |
          xcrun stapler staple ./Package/UserPlugins/$PLUGIN_NAME.dylib
        shell: bash

      - name: Create zip for release
        run: |
          cd Package
          zip -r ../$PLUGIN_NAME_${{ github.ref_name }}_mac_arm.zip .
        shell: bash

